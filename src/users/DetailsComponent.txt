 
 
  
    const labels = {
    Name:"Name",
    LastName:"Last Name",
    Phone:"Phone",
    Photo:"Photo",
    PrimaryWork:"Primary Work",
    Payment:"Payment",
    DescriptionWork:"Description Work",
    City:"City",
    Email:"Email",
    PhotoGallery:"Photo Gallery"
    }
 
 
 
 
 {Object.getOwnPropertyNames(data).map(property => {
      console.log(property)
      console.log(property in ["PhotoPath","PhotoGalleryPath","Id"]);
        return (
          !(["PhotoPath","PhotoGalleryPath","Id"].includes(property)) ?
          <div>    
            <div>
              <img></img>  
            </div>       
            <label>
              {
                //@ts-ignore
                labels[property]
              }
            </label>           
              <input
                id={property}
                // @ts-ignore
                value={data[property]}
                onChange={handleChange}
              />

          </div> : false
        )
      })} 


  
  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {
    //@ts-ignore
    setData({ ...data, [e.currentTarget.id]: e.currentTarget.value })
  }


       fetch(`${apiUser}employee/${props.id}`,{
      method: "GET",
          headers: {
            "Content-Type": "application/json",
             "Authorization":`Bearer ${props.jwt}`
          },
          mode: "cors"
    }).then(x=>x.json()).then(x=>{
      let ob= {Id:"",
      Name:"",
      LastName:"",
      Phone:"",
      Photo:"",
      PrimaryWork:"",
      Payment:"",
      DescriptionWork:"",
      City:"",
      Email:"",
      PhotoGallery:""}
     Object.entries(x).map(([prop,value])=>{
       console.log(prop.substring(0, 1).toUpperCase() + prop.substring(1));
       console.log(value);
       //@ts-ignore
      ob[prop.substring(0, 1).toUpperCase() + prop.substring(1)]=value;
     })
     console.log(ob);
     setData(ob);
    })







     function importAll(r:any) {
    let images = {};
    //@ts-ignore
    r.keys().map((item:any, index:any) => { images[item.replace('./', '')] = r(item); });
    return images;
  }
  
  const images = importAll(require.context('../../../MagRad/MagRad/wwwroot/Images', false, /\.(png|jpe?g|svg)$/));





















  import React,{useEffect, useState, FormEventHandler, ChangeEvent} from "react";
import { Employee, Employeer, Proposal, EmployeeWorks } from "../account/types";
import { apiUser, getDataToDatabase, jobUrl } from "../environment/environment";
import CreateIcon from '@material-ui/icons/Create';
import StarIcon from '@material-ui/icons/Star';
import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Carousel from "./Carousel";
import EmployeeDialog from "./EmployeeDialog";
import SingleLineGridList from "./Gallery";
import Paper from '@material-ui/core/Paper';
import { Fab } from '@material-ui/core';

const useStyles = makeStyles((theme: Theme) =>
createStyles({  
  paper: {
    marginTop: theme.spacing(20),
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    flex:'auto',
    marginRight:theme.spacing(35)
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
    width:'40%',
    fontSize:'1.5vmin'
  },
 personalData:{
   fontSize:'3.5vmin',
 },
 descriptionData:{
  flex:'65%', marginTop:'90px',
  fontSize:'2.5vmin'
 }

}),
);
const ProfilePageComponent = (props:any) => {

  const classes=useStyles()

  

 
  // ovde dohvatim sve slike ... jer ne moze onako, i onda moram ici kroz ovaj niz da nadjem koja mi treba, preko imena kojeg dobijem s bekenda aha haj pokusaj ovako
  const [openDialog, setOpenDialog]=useState<boolean>(false);
  const [hover, setHover]=useState<boolean>();
  const [updateWorkExp, setUpdateWorkExp]=useState<EmployeeWorks>();
  const [data,setData]=useState<Employee>({
    Id:"",
    Name:"",
    LastName:"",
    Phone:"",
    PrimaryWork:"",
    Payment:"",
    DescriptionWork:"",
    City:"",
    Email:"",
    PhotoGallery:"",
    PhotoPath:"",
    TotalMark:0
  });

  const [previousWork, setPreviousWork]=React.useState<EmployeeWorks[]>([]);
  const [proposals, setProposals]=useState<Proposal[]>();
  const [employeers, setEmployeers]=useState<{name:string, lastName:string}[]>([]);

  useEffect(()=>{
    getDataToDatabase(`http://localhost:52906/employeeWork/${props.id}`, props.jwt).then((y) => y.json()).then((x) =>setPreviousWork(x)).catch(e=>console.log)


    const getEmployee=async()=>{
      await getDataToDatabase(`${apiUser}employee/${props.id}`, props.jwt).then((y) => y.json()).then((x) =>
    {
      let ob= {Id:"",Name:"",LastName:"",Phone:"",PrimaryWork:"",PhotoPath:"", Payment:"",DescriptionWork:"",City:"",Email:"",PhotoGallery:""}
     Object.entries(x).map(([prop,value])=>{
       //@ts-ignore
      ob[prop.substring(0, 1).toUpperCase() + prop.substring(1)]=value;
     })
     setData(ob);
    })
    }
    const fetchJobDetails =async () =>
    await getDataToDatabase(`${jobUrl}overview/details/${props.id}`, props.jwt).then((y) => y.json()).then((x) =>{
      x.map(async (value: any) => {
        setProposals(x)
        if(value.employeerId)
        {
          const employeer = await fetchEmployeesById(value.employeerId)
          setEmployeers([...employeers, employeer])
        }
    
      })
      getEmployee();
    }
     
    )

    const fetchEmployeesById = async (employeerId: string) =>
    await getDataToDatabase(`${apiUser}employeer/${employeerId}`, props.jwt).then((y) => y.json()).then((z) => ({ id:z.id, name: z.name, lastName: z.lastName }))

    fetchJobDetails();
  },[])


console.log(proposals)
console.log(employeers)
let proba = "https://www.elegantthemes.com/blog/wp-content/uploads/2015/02/custom-trackable-short-url-feature.png"

const handleChangeImg=async(e:ChangeEvent<HTMLInputElement>)=>{
  const form= new FormData();
  const copyData:Employee=data;
  const photoName:string=e.target.value.split("\\").pop()!;
  const extension:string=photoName?.split(".").pop()!;
  if (["jpeg", "jpg", "png", "svg"].includes(extension))
  {
    copyData.Photo=e?.currentTarget.files![0]
    copyData.PrimaryWork="Irget"
    for (const prop in copyData) {
     
      //@ts-ignore
      form.append(prop, copyData[prop]);

    }
   
    fetch(`${apiUser}updateEmployee`,{
      method: "PUT",
          headers: {
             "Authorization":`Bearer ${props.jwt}`
          },
          mode: "cors",
          body:form
    }).then(x=>{console.log(x); return x}).then(x=>{
      console.log(x);
      let ob= {Id:"",Name:"",LastName:"",Phone:"",Photo:undefined,PrimaryWork:"", PhotoPath:"", Payment:"",DescriptionWork:"",City:"",Email:"",PhotoGallery:""}
      Object.entries(x).map(([prop,value])=>{
        //@ts-ignore
       ob[prop.substring(0, 1).toUpperCase() + prop.substring(1)]=value;
      })
      setData(ob);
     }).catch(e=>console.log)
  }
  else
  return false;
}
console.log(data);
const handleChangeData=(e:any)=>{
  setData({...data, [e.target.id]: e.target.value})
}

const handleSubmitUpdate=()=>{
  fetch(`${apiUser}updateEmployee2`,{
    method: "PUT",
        headers: {
            "Content-Type":"application/json",
           "Authorization":`Bearer ${props.jwt}`
        },
        mode: "cors",
        body:JSON.stringify(data)
  }).then(x=>x.json()).then(x=>{
    console.log(x);
    let ob= {Id:"",Name:"",LastName:"",Phone:"",Photo:undefined,PrimaryWork:"", PhotoPath:"", Payment:"",DescriptionWork:"",City:"",Email:"",PhotoGallery:""}
    Object.entries(x).map(([prop,value])=>{
      //@ts-ignore
     ob[prop.substring(0, 1).toUpperCase() + prop.substring(1)]=value;
    })
    setData(ob);
   })
}
      //@ts-ignore
console.log(previousWork)

  return <div>
    <div style={{display:'flex'}}>

    <div style={{flex:'30%', borderRight:'2px solid black',marginTop:'70px'}}>
        <div style={{position:'relative'}}>
        <img alt="bzv" src={"http://localhost:52906/Images/"+data?.PhotoPath}
        // src={
        //   //@ts-ignore
        //     images[data.PhotoPath]} 
            style={{height:'220px', maxWidth:'220px', width:'220px', border:"2px solid black", borderRadius:'50%'}}
            onMouseOut={() => setHover(false)}
            onMouseOver={() => setHover(true)}
        />
        <label htmlFor="files">
          <CreateIcon onMouseOver={() => setHover(true) } style={{display:hover ? 'table' : 'none', position:'absolute', top:'48%', left:'48%', color:'white', fontSize:'2rem'}}/>
          <input type="file" id="files"  onChange={handleChangeImg} style={{display:'none'}}/>
        </label> 
        </div>  
      
        <br/>
        <div className={classes.personalData}>
          <span>{data.City}</span>
          <br/>
          <span>{data.Name} {data.LastName}</span>
          <br/>
          <span>{data.Phone}</span>
          <br/>
          <span>{data.PrimaryWork}</span>
        </div>
         <br/>
         <Button
            fullWidth
            variant="contained"
            color="primary"
            className={classes.submit}
            onClick={handleChangeData} 
          >
            Uredit profil
          </Button>
        </div>
       
    <div className={classes.descriptionData}> 
    
    <p>{data.DescriptionWork} </p>
    <p style={{textAlign:'right', width:'70%'}}>{data.Payment} KM</p>
    <p style={{textAlign:'right', width:'70%'}}>Ukupna ocjena: {data.TotalMark}   <StarIcon style={{color:"#DAA520", fontSize:'3.5vmin', verticalAlign:'middle', marginTop:'-8px'}}/></p>
        <div style={{display:'flex', width:'80%', margin:'0 auto', marginTop:'7vh'}}>
             <p style={{textAlign:'left', flex:'70%', verticalAlign:'middle', margin:0}}>Dosada≈°nji poslovi i iskustvo: </p>  
            <Button variant="outlined" color="primary" style={{flex:'25%', maxHeight:'4vh', maxWidth:'5vw'}} onClick={()=>{setOpenDialog(true); setUpdateWorkExp(undefined)}}>
                 Unesite
            </Button>
        </div>
    
        <div>
        {
          previousWork?.map(x=>{
            //@ts-ignore
            let arrayImages=x.allPathsPhotos?.split(",")
            arrayImages?.pop()
            return <Paper elevation={3}
                    style={{width:'90%', margin:'20px auto', padding:'10px', 
                    borderTop:'1px solid grey'}}>
                    <div style={{display:'flex'}}>
                        <p style={{textAlign:'left', flex:'97%', width:'70%', margin:'5px auto'}}> Naslov: {
                        //@ts-ignore
                        x.title}</p>
                        <Fab color="primary" aria-label="add" style={{flex:'5%'}} onClick={()=>{setOpenDialog(true); setUpdateWorkExp(x)}}>
                          <CreateIcon />
                        </Fab>
                    </div>
                    
                    <p>{
                    //@ts-ignore
                    x.description}</p>
                    <div style={{padding:'10px'}}>
                    {
                     arrayImages ? <SingleLineGridList images={arrayImages} title={
                      //@ts-ignore 
                      x.title} id={props.id}/> : false
                    }
                    </div>
                   
              </Paper>
          })
        }
        </div>
      
      <EmployeeDialog workExp={updateWorkExp} open={openDialog} close={()=>setOpenDialog(false)} jwt={props.jwt} EmployeeId={props.id} updateWorkExp={(username:any)=>{setPreviousWork(username)}} />

  </div>
    </div>
    

    <div style={{marginTop:'10vh', marginBottom:'5vh'}}>
      <h1 style={{fontSize:'3.4vmin'}}>Iskustva na≈°ih korisnika</h1> 
     <Carousel proposals={proposals}/>
     <br/>
    </div>
  </div>
};

export default ProfilePageComponent;
